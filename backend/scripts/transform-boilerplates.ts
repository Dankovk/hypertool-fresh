#!/usr/bin/env bun
/**
 * Transform boilerplate presets into a bundled JS module
 * This ensures they survive Vercel deployments where only imported files are included
 */

import { writeFileSync, mkdirSync, existsSync } from "node:fs";
import { join } from "node:path";
import { getBoilerplateFileMap, type BoilerplateData } from "../src/lib/fileUtils.js";

function generateModule(data: BoilerplateData): string {
  return `/**
 * Auto-generated boilerplate data
 * Generated at: ${new Date().toISOString()}
 *
 * This file is generated by scripts/transform-boilerplates.ts
 * Do not edit manually - run 'bun run transform:boilerplate' to regenerate
 */

export const BOILERPLATE_DATA = ${JSON.stringify(data, null, 2)} as const;

export type FileMap = Record<string, string>;

export interface PresetInfo {
  id: string;
  name: string;
  description: string;
}

export function listAvailablePresets(): PresetInfo[] {
  return BOILERPLATE_DATA.presets.map(({ id, name, description }) => ({
    id,
    name,
    description,
  }));
}

export function loadBoilerplateFiles(presetId?: string): FileMap {
  if (presetId) {
    const preset = BOILERPLATE_DATA.presets.find(p => p.id === presetId);
    if (preset) {
      return preset.files;
    }
  }

  // Fallback to universal
  return BOILERPLATE_DATA.universal;
}
`;
}

// Main execution
try {
  console.log("üîÑ Transforming boilerplate presets...\n");

  const data = getBoilerplateFileMap();
  const moduleCode = generateModule(data);

  // Ensure lib directory exists
  const libDir = join(process.cwd(), "src", "lib");
  if (!existsSync(libDir)) {
    mkdirSync(libDir, { recursive: true });
  }

  const outputPath = join(libDir, "boilerplate-data.ts");
  writeFileSync(outputPath, moduleCode, "utf8");

  console.log(`\n‚úÖ Generated: ${outputPath}`);
  console.log(`üì¶ Presets: ${data.presets.length}`);
  console.log(`üìÑ Total files: ${data.presets.reduce((sum, p) => sum + Object.keys(p.files).length, 0)}`);
} catch (error) {
  console.error("‚ùå Error transforming boilerplates:", error);
  process.exit(1);
}
