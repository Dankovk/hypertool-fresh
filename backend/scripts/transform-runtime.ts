#!/usr/bin/env bun
/**
 * Transform runtime library dist into a bundled JS module
 * This ensures runtime files survive Vercel deployments where only imported files are included
 */

import { writeFileSync, mkdirSync, existsSync } from "node:fs";
import { join } from "node:path";
import { getRuntimeFileMap, type RuntimeData } from "../src/lib/fileUtils.js";
import { VIRTUAL_PATH } from "@hypertool/shared-config/paths";

function generateModule(data: RuntimeData): string {
  return `/**
 * Auto-generated runtime library data
 * Generated at: ${new Date(data.timestamp).toISOString()}
 *
 * This file is generated by scripts/transform-runtime.ts
 * Do not edit manually - run 'bun run transform:runtime' to regenerate
 */

export const RUNTIME_DATA = ${JSON.stringify(data, null, 2)} as const;

export type FileMap = Record<string, string>;

export function loadRuntimeBundles(): FileMap {
  return RUNTIME_DATA.files;
}
`;
}

// Main execution
try {
  console.log("üîÑ Transforming runtime library...\n");

  const data = getRuntimeFileMap();
  const moduleCode = generateModule(data);

  // Ensure lib directory exists
  const dataDir = join(process.cwd(), "src", "data");
  if (!existsSync(dataDir)) {
    mkdirSync(dataDir, { recursive: true });
  }

  const outputPath = join(dataDir, "runtime-data.ts");
  writeFileSync(outputPath, moduleCode, "utf8");

  console.log(`\n‚úÖ Generated: ${outputPath}`);
  console.log(`üì¶ Bundle size: ${data.files[VIRTUAL_PATH].length} bytes`);
} catch (error) {
  console.error("‚ùå Error transforming runtime:", error);
  process.exit(1);
}
